---
export interface Props {
  koans: Array<{
    id: string;
    question: string;
    code: string;
    answer: string;
    validation?: string;
    hint?: string;
    explanation?: string;
  }>;
}

const { koans } = Astro.props;
---

<div class="koans-section mt-8 p-6 bg-gradient-to-r from-yellow-50 to-orange-50 dark:from-yellow-900/20 dark:to-orange-900/20 rounded-lg border border-yellow-200 dark:border-yellow-800">
  <div class="flex items-center gap-2 mb-4">
    <span class="text-2xl">ðŸ§˜</span>
    <h3 class="text-xl font-bold text-yellow-900 dark:text-yellow-100">Koans - Test Your Understanding</h3>
  </div>
  
  <p class="text-sm text-yellow-800 dark:text-yellow-200 mb-6">
    Fill in the blanks and press Enter or click Run to test your knowledge!
  </p>
  
  <div class="space-y-6">
    {koans.map((koan) => (
      <div class="koan-item" data-koan-id={koan.id}>
        <div class="bg-white dark:bg-gray-800 rounded-lg p-4 border border-yellow-300 dark:border-yellow-700">
          <h4 class="font-medium text-gray-900 dark:text-gray-100 mb-4">
            {koan.question}
          </h4>
          
          <form class="koan-form" data-koan-id={koan.id}>
            <div class="relative bg-gray-900 dark:bg-gray-950 rounded-lg p-4 font-mono text-sm">
              <div class="flex items-center gap-2 mb-3">
                <div class="flex gap-1">
                  <div class="w-3 h-3 bg-red-500 rounded-full"></div>
                  <div class="w-3 h-3 bg-yellow-500 rounded-full"></div>
                  <div class="w-3 h-3 bg-green-500 rounded-full"></div>
                </div>
                <span class="text-gray-400 text-xs">Erlang Shell</span>
              </div>
              
              <div class="text-gray-300">
                <div class="koan-code-container" data-answer={koan.answer} data-validation={koan.validation}>
                  <div class="relative">
                    <div class="koan-code-lines">
                      {koan.code.split('\n').map((line, index) => (
                        <div class="flex items-start gap-2">
                          <span class="text-blue-400 select-none" style="min-width: 24px;">
                            {index === 0 ? '1>' : '1>'}
                          </span>
                          <span class="text-white whitespace-pre-wrap flex-1" set:html={line.replace(/___/g, '<span class="koan-blank">___</span>')} />
                        </div>
                      ))}
                    </div>
                    <input 
                      type="text" 
                      class="koan-input"
                      placeholder=""
                      data-koan-id={koan.id}
                    />
                  </div>
                </div>
              </div>
              
              <div class="flex items-center justify-between mt-3">
                <div class="koan-result" data-koan-id={koan.id}>
                  <div class="success-message hidden text-green-400 text-sm">
                    <span class="text-blue-400">2></span> <span class="result-output">Correct!</span>
                  </div>
                  
                  <div class="error-message hidden text-red-400 text-sm">
                    <span class="text-red-400">**</span> <span class="error-output"></span>
                  </div>
                </div>
                
                <button 
                  type="submit"
                  class="koan-run-btn px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white rounded text-xs font-medium transition-colors"
                  data-koan-id={koan.id}
                >
                  Run
                </button>
              </div>
            </div>
          </form>
          
          {koan.hint && (
            <details class="mt-3">
              <summary class="cursor-pointer text-sm font-medium text-yellow-700 dark:text-yellow-300 hover:text-yellow-900 dark:hover:text-yellow-100">
                ðŸ’¡ Hint
              </summary>
              <div class="mt-2 text-sm text-gray-600 dark:text-gray-400 pl-4">
                {koan.hint}
              </div>
            </details>
          )}
          
          {koan.explanation && (
            <details class="mt-3">
              <summary class="cursor-pointer text-sm font-medium text-blue-700 dark:text-blue-300 hover:text-blue-900 dark:hover:text-blue-100">
                ðŸ“š Explanation
              </summary>
              <div class="mt-2 text-sm text-gray-600 dark:text-gray-400 pl-4">
                {koan.explanation}
              </div>
            </details>
          )}
        </div>
      </div>
    ))}
  </div>
</div>

<script>
  // Import the shared validation logic
  const { KoanValidator } = await import('../../js-erlang-interpreter/src/koan-validator.js');

  let validator: KoanValidator;

  function initializeKoans() {
    validator = new KoanValidator();
    
    const forms = document.querySelectorAll('.koan-form');
    
    forms.forEach(form => {
      form.addEventListener('submit', handleKoanSubmit);
    });

    // Handle input positioning and sizing - delay to ensure DOM is ready
    setTimeout(() => {
      const inputs = document.querySelectorAll('.koan-input');
      inputs.forEach(input => {
        positionInput(input as HTMLInputElement);
      });
    }, 100);
  }

  function positionInput(input: HTMLInputElement) {
    const koanId = input.dataset.koanId;
    if (!koanId) return;

    const blank = document.querySelector(`.koan-item[data-koan-id="${koanId}"] .koan-blank`);
    if (blank) {
      // Position the input over the blank
      const blankRect = blank.getBoundingClientRect();
      const container = blank.closest('.relative');
      if (container) {
        const containerRect = container.getBoundingClientRect();
        input.style.left = `${blankRect.left - containerRect.left}px`;
        input.style.top = `${blankRect.top - containerRect.top}px`;
        input.style.width = `${Math.max(blankRect.width, 60)}px`;
        input.style.height = `${blankRect.height}px`;
      }
    }
  }

  async function handleKoanSubmit(e: Event) {
    e.preventDefault();
    
    const form = e.target as HTMLFormElement;
    const koanId = form.dataset.koanId;
    if (!koanId) return;

    const input = form.querySelector('.koan-input') as HTMLInputElement;
    const result = form.querySelector(`.koan-result[data-koan-id="${koanId}"]`) as HTMLElement;
    
    if (!input || !result) return;

    const successMsg = result.querySelector('.success-message') as HTMLElement;
    const errorMsg = result.querySelector('.error-message') as HTMLElement;
    const resultOutput = result.querySelector('.result-output') as HTMLElement;
    const errorOutput = result.querySelector('.error-output') as HTMLElement;
    
    if (!successMsg || !errorMsg || !resultOutput || !errorOutput) return;

    const userAnswer = input.value.trim();
    const codeContainer = form.querySelector('.koan-code-container') as HTMLElement;
    const expectedAnswer = codeContainer?.dataset?.answer;

    // Reset previous results
    successMsg.classList.add('hidden');
    errorMsg.classList.add('hidden');

    // Try to validate the answer using the validator
    try {
      const validationHint = codeContainer.dataset.validation || 'value_check';
      const isCorrect = await validator.validateAnswer(userAnswer, expectedAnswer || '', validationHint);
      
      if (isCorrect) {
        successMsg.classList.remove('hidden');
        // resultOutput already contains "Correct!" from the HTML
        input.style.borderColor = '#10b981'; // green
      } else {
        errorMsg.classList.remove('hidden');
        errorOutput.textContent = `Try again! Expected something that makes the code work.`;
        input.style.borderColor = '#ef4444'; // red
      }
    } catch (error) {
      // Fallback to simple string comparison if validator fails
      if (userAnswer === expectedAnswer) {
        successMsg.classList.remove('hidden');
        input.style.borderColor = '#10b981'; // green
      } else {
        errorMsg.classList.remove('hidden');
        errorOutput.textContent = `Expected: ${expectedAnswer}`;
        input.style.borderColor = '#ef4444'; // red
      }
    }
  }

  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', initializeKoans);

  // Re-initialize on page transitions
  document.addEventListener('astro:page-load', initializeKoans);

  // Handle window resize
  window.addEventListener('resize', () => {
    const inputs = document.querySelectorAll('.koan-input');
    inputs.forEach(input => {
      positionInput(input as HTMLInputElement);
    });
  });
</script>

<style>
  .koan-code-container {
    position: relative;
    line-height: 1.5;
  }
  
  .koan-blank {
    background: rgba(59, 130, 246, 0.2);
    border: 1px dashed rgba(59, 130, 246, 0.5);
    border-radius: 3px;
    padding: 2px 6px;
    display: inline-block;
    min-width: 50px;
    text-align: center;
    position: relative;
    font-weight: bold;
  }
  
  .koan-input {
    position: absolute;
    background: rgba(59, 130, 246, 0.1);
    border: 1px solid rgba(59, 130, 246, 0.3);
    border-radius: 3px;
    padding: 2px 4px;
    color: white;
    font-family: 'ui-monospace', 'SFMono-Regular', 'Menlo', 'Monaco', 'Consolas', 'Liberation Mono', 'Courier New', monospace;
    font-size: 14px;
    line-height: 1.5;
    outline: none;
    transition: all 0.2s ease;
    z-index: 10;
  }
  
  .koan-input:focus {
    border-color: rgba(59, 130, 246, 0.8);
    background: rgba(59, 130, 246, 0.2);
    box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.3);
  }
  
  .koan-run-btn:active {
    transform: translateY(1px);
  }

  .koan-result {
    min-height: 20px;
  }

  .koan-form {
    margin-bottom: 0;
  }

  /* Terminal-like styling */
  .koan-code-container {
    font-family: 'ui-monospace', 'SFMono-Regular', 'Menlo', 'Monaco', 'Consolas', 'Liberation Mono', 'Courier New', monospace;
  }
</style>