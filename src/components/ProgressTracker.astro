---
export interface Props {
  lessons: any[];
}

const { lessons } = Astro.props;
const totalLessons = lessons.length;
---

<div class="bg-white dark:bg-gray-800 rounded-lg p-4 shadow-sm">
  <h3 class="text-sm font-medium text-gray-900 dark:text-gray-100 mb-3">
    Your Progress
  </h3>
  
  <div class="flex items-center justify-center mb-3">
    <div class="relative">
      <svg class="progress-ring w-20 h-20">
        <circle
          class="text-gray-200 dark:text-gray-700"
          stroke="currentColor"
          stroke-width="4"
          fill="transparent"
          r="36"
          cx="40"
          cy="40"
        />
        <circle
          class="progress-ring-circle text-green-500"
          stroke="currentColor"
          stroke-width="4"
          fill="transparent"
          r="36"
          cx="40"
          cy="40"
          stroke-dasharray="226.195"
          stroke-dashoffset="226.195"
          id="progress-circle"
        />
      </svg>
      <div class="absolute inset-0 flex items-center justify-center">
        <span class="text-2xl font-bold" id="progress-percentage">0%</span>
      </div>
    </div>
  </div>
  
  <div class="text-center text-sm text-gray-600 dark:text-gray-400">
    <span id="completed-count">0</span> of {totalLessons} lessons completed
  </div>
  
  <button
    id="reset-progress"
    class="mt-3 w-full text-xs text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
    aria-label="Reset learning progress"
  >
    Reset Progress
  </button>
</div>

<script is:inline define:vars={{ totalLessons }}>
  function updateProgress() {
    const completedLessons = JSON.parse(localStorage.getItem('completedLessons') || '[]');
    const completedCount = completedLessons.length;
    const percentage = Math.round((completedCount / totalLessons) * 100);
    
    const circle = document.getElementById('progress-circle');
    const percentageText = document.getElementById('progress-percentage');
    const countText = document.getElementById('completed-count');
    
    if (circle && percentageText && countText) {
      const circumference = 2 * Math.PI * 36;
      const offset = circumference - (percentage / 100 * circumference);
      
      circle.style.strokeDashoffset = offset.toString();
      percentageText.textContent = `${percentage}%`;
      countText.textContent = completedCount.toString();
    }
  }
  
  // Update on load
  updateProgress();
  
  // Listen for changes
  window.addEventListener('storage', updateProgress);
  document.addEventListener('astro:page-load', updateProgress);
  document.addEventListener('astro:after-swap', updateProgress);
  
  // Reset button
  document.getElementById('reset-progress')?.addEventListener('click', () => {
    if (confirm('Are you sure you want to reset your progress?')) {
      localStorage.removeItem('completedLessons');
      updateProgress();
      location.reload();
    }
  });
</script>