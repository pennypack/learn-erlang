---
import '../styles/global.css';
import Header from '../components/Header.astro';
import Sidebar from '../components/Sidebar.astro';
import Footer from '../components/Footer.astro';
import { ClientRouter } from 'astro:transitions';

export interface Props {
  title: string;
  description?: string;
  ogImage?: string;
}

const { title, description = 'Learn Erlang Step-By-Step - Build a WebSocket chat server from scratch', ogImage = '/og-default.png' } = Astro.props;
const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- SEO -->
    <title>{title} | Learn Erlang Step-By-Step</title>
    <meta name="description" content={description} />
    <link rel="canonical" href={canonicalURL} />
    
    <!-- Open Graph -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:image" content={new URL(ogImage, Astro.site)} />
    <meta property="og:type" content="website" />
    
    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={new URL(ogImage, Astro.site)} />
    
    <!-- Theme -->
    <script is:inline>
      // Initialize theme on first load
      function initializeTheme() {
        const theme = (() => {
          if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
            return localStorage.getItem('theme');
          }
          if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
            return 'dark';
          }
          return 'light';
        })();
        
        if (theme === 'dark') {
          document.documentElement.classList.add('dark');
          document.documentElement.setAttribute('data-theme', 'dark');
        } else {
          document.documentElement.classList.remove('dark');
          document.documentElement.setAttribute('data-theme', 'light');
        }
      }
      
      // Run on initial load
      initializeTheme();
      
      // Handle view transitions
      document.addEventListener('astro:after-swap', initializeTheme);
    </script>
    
    <ClientRouter />
  </head>
  <body class="min-h-screen flex flex-col">
    <Header />
    
    <div class="flex-1 flex relative">
      <Sidebar />
      
      <!-- Desktop Sidebar Collapse Button -->
      <button
        id="sidebar-collapse-btn"
        class="hidden lg:flex fixed w-8 h-8 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-full items-center justify-center hover:bg-gray-50 dark:hover:bg-gray-700 transition-all duration-300 z-50 shadow-lg transform -translate-x-1/2 opacity-0"
        title="Toggle sidebar"
        style="top: 5rem; left: 16rem;"
      >
        <svg id="sidebar-collapse-arrow" class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
      </button>
      
      <!-- Hover zone for collapse button -->
      <div
        id="sidebar-hover-zone"
        class="hidden lg:block fixed z-40"
        style="top: 4rem; width: 3rem; bottom: 0; left: 14rem;"
      ></div>
      
      <main class="flex-1 w-full max-w-none lg:max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <slot />
      </main>
    </div>
    
    <Footer />
    
    <script>
      // Keyboard navigation
      document.addEventListener('keydown', (e) => {
        // Only activate if no input is focused
        if (document.activeElement?.tagName === 'INPUT' || 
            document.activeElement?.tagName === 'TEXTAREA') {
          return;
        }
        
        // Ctrl/Cmd + K for search
        if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
          e.preventDefault();
          document.getElementById('search-button')?.click();
        }
        
        // Navigation shortcuts
        if (e.key === 'ArrowLeft') {
          const prevLink = document.querySelector('[data-prev-link]') as HTMLAnchorElement;
          if (prevLink) prevLink.click();
        }
        
        if (e.key === 'ArrowRight') {
          const nextLink = document.querySelector('[data-next-link]') as HTMLAnchorElement;
          if (nextLink) nextLink.click();
        }
      });

      // Sidebar collapse functionality
      let collapseInitialized = false;
      
      function updateButtonPosition(sidebar, collapseBtn, hoverZone, isCollapsed, currentWidth) {
        if (isCollapsed) {
          collapseBtn.style.left = '0.5rem';
          hoverZone.style.left = '-1rem';
          hoverZone.style.width = '2rem';
        } else {
          const width = currentWidth || sidebar.offsetWidth;
          collapseBtn.style.left = width + 'px';
          hoverZone.style.left = (width + 4) + 'px'; // Start 4px past the sidebar edge
          hoverZone.style.width = '2rem';
        }
      }
      
      function initSidebarCollapse() {
        if (collapseInitialized) return;
        
        const sidebar = document.getElementById('sidebar');
        const collapseBtn = document.getElementById('sidebar-collapse-btn');
        const arrow = document.getElementById('sidebar-collapse-arrow');
        const resizeHandle = document.getElementById('resize-handle');
        const hoverZone = document.getElementById('sidebar-hover-zone');
        
        if (!sidebar || !collapseBtn || !arrow || !hoverZone) return;
        
        // Get saved state
        let isCollapsed = localStorage.getItem('sidebarCollapsed') === 'true';
        let savedWidth = localStorage.getItem('sidebarWidth') || '16rem';
        
        // Apply initial state
        if (window.innerWidth >= 1024) {
          if (isCollapsed) {
            sidebar.classList.add('collapsed');
            arrow.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>';
            updateButtonPosition(sidebar, collapseBtn, hoverZone, true);
          } else {
            sidebar.classList.remove('collapsed');
            sidebar.style.width = savedWidth;
            arrow.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>';
            updateButtonPosition(sidebar, collapseBtn, hoverZone, false);
          }
        }
        
        // Hover functionality
        function showButton() {
          collapseBtn.style.opacity = '1';
        }
        
        function hideButton() {
          collapseBtn.style.opacity = '0';
        }
        
        hoverZone.addEventListener('mouseenter', showButton);
        hoverZone.addEventListener('mouseleave', hideButton);
        collapseBtn.addEventListener('mouseenter', showButton);
        collapseBtn.addEventListener('mouseleave', hideButton);
        
        // Add click handler
        collapseBtn.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          
          isCollapsed = !isCollapsed;
          localStorage.setItem('sidebarCollapsed', isCollapsed.toString());
          
          if (isCollapsed) {
            sidebar.classList.add('collapsed');
            arrow.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>';
            updateButtonPosition(sidebar, collapseBtn, hoverZone, true);
          } else {
            sidebar.classList.remove('collapsed');
            sidebar.style.width = savedWidth;
            arrow.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>';
            updateButtonPosition(sidebar, collapseBtn, hoverZone, false);
          }
        });
        
        // Restore resize functionality
        if (resizeHandle) {
          let isResizing = false;
          
          resizeHandle.addEventListener('mousedown', (e) => {
            if (isCollapsed) return;
            
            isResizing = true;
            document.body.style.cursor = 'col-resize';
            document.body.style.userSelect = 'none';
            
            const startX = e.clientX;
            const startWidth = sidebar.offsetWidth;
            
            function handleMouseMove(e) {
              if (!isResizing) return;
              
              const newWidth = startWidth + (e.clientX - startX);
              const minWidth = 192; // 12rem
              const maxWidth = 448; // 28rem
              
              if (newWidth >= minWidth && newWidth <= maxWidth) {
                sidebar.style.width = newWidth + 'px';
                savedWidth = newWidth + 'px';
                updateButtonPosition(sidebar, collapseBtn, hoverZone, false, newWidth);
              }
            }
            
            function handleMouseUp() {
              isResizing = false;
              document.body.style.cursor = '';
              document.body.style.userSelect = '';
              localStorage.setItem('sidebarWidth', savedWidth);
              
              document.removeEventListener('mousemove', handleMouseMove);
              document.removeEventListener('mouseup', handleMouseUp);
            }
            
            document.addEventListener('mousemove', handleMouseMove);
            document.addEventListener('mouseup', handleMouseUp);
          });
        }
        
        collapseInitialized = true;
      }
      
      // Initialize collapse functionality
      document.addEventListener('DOMContentLoaded', () => {
        setTimeout(initSidebarCollapse, 100);
      });
      
      document.addEventListener('astro:page-load', () => {
        collapseInitialized = false;
        setTimeout(initSidebarCollapse, 100);
      });
    </script>
  </body>
</html>