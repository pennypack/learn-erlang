---
import Layout from './Layout.astro';
import TableOfContents from '../components/TableOfContents.astro';
import LessonNavigation from '../components/LessonNavigation.astro';
import LessonProgressBar from '../components/LessonProgressBar.astro';
import ReadingTime from '../components/ReadingTime.astro';
import { getCollection } from 'astro:content';

export interface Props {
  title: string;
  description: string;
  postNumber: number;
  publishDate: Date;
  tags: string[];
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  estimatedReadingTime?: number;
  prerequisites?: number[];
}

const { title, description, postNumber, publishDate, tags, estimatedReadingTime, prerequisites } = Astro.props;

// Get all lessons for navigation
const allLessons = await getCollection('lessons');
const sortedLessons = allLessons.sort((a, b) => a.data.postNumber - b.data.postNumber);

const currentIndex = sortedLessons.findIndex(l => l.data.postNumber === postNumber);
const prevLesson = currentIndex > 0 ? sortedLessons[currentIndex - 1] : null;
const nextLesson = currentIndex < sortedLessons.length - 1 ? sortedLessons[currentIndex + 1] : null;
---

<Layout title={title} description={description}>
  <LessonProgressBar />
  <article class="prose prose-lg dark:prose-invert max-w-none">
    <!-- Lesson Header -->
    <header class="not-prose mb-8 pb-8 border-b border-gray-200 dark:border-gray-800">
      <div class="flex items-center gap-3 mb-4">
        <ReadingTime content={Astro.slots.default} estimatedTime={estimatedReadingTime} />
      </div>
      
      <h1 class="text-4xl font-bold text-gray-900 dark:text-gray-100 mb-4">
        Lesson {postNumber}: {title}
      </h1>
      
      <p class="text-xl text-gray-600 dark:text-gray-400 mb-4">
        {description}
      </p>
      
      <div class="flex flex-wrap items-center gap-4 text-sm text-gray-600 dark:text-gray-400">
        <time datetime={publishDate.toISOString()}>
          {publishDate.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}
        </time>
        
        <div class="flex items-center gap-2">
          {tags.map(tag => (
            <span class="px-2 py-1 bg-gray-100 dark:bg-gray-800 rounded text-xs">
              {tag}
            </span>
          ))}
        </div>
        
        <a
          href="mailto:feedback@pennypack.dev?subject=Feedback on Lesson {postNumber}: {title}"
          class="ml-auto flex items-center gap-1 hover:text-gray-900 dark:hover:text-gray-100"
        >
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
          </svg>
          Send Feedback
        </a>
      </div>
      
      {prerequisites && prerequisites.length > 0 && (
        <div class="mt-4 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
          <h3 class="text-sm font-medium text-blue-900 dark:text-blue-100 mb-2">Prerequisites</h3>
          <p class="text-sm text-blue-700 dark:text-blue-300">
            Complete these lessons first:
            {prerequisites.map((num, i) => {
              const prereqLesson = sortedLessons.find(l => l.data.postNumber === num);
              return (
                <span>
                  {i > 0 && ', '}
                  <a href={`/lessons/${prereqLesson?.slug}`} class="underline">
                    Lesson {num}: {prereqLesson?.data.title}
                  </a>
                </span>
              );
            })}
          </p>
        </div>
      )}
    </header>
    
    <!-- Table of Contents -->
    <TableOfContents />
    
    <!-- Lesson Content -->
    <div id="lesson-content" class="mt-8">
      <slot />
    </div>
    
    <!-- Mark as Complete -->
    <div class="not-prose mt-12 p-6 bg-gray-50 dark:bg-gray-900 rounded-lg">
      <div class="flex items-center justify-between">
        <div>
          <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100">
            Finished this lesson?
          </h3>
          <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">
            Mark it as complete to track your progress
          </p>
        </div>
        
        <button
          id="mark-complete"
          data-lesson-number={postNumber}
          class="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-md font-medium transition-colors"
          aria-label="Mark this lesson as complete"
        >
          Mark as Complete
        </button>
      </div>
    </div>
    
    <!-- Attribution -->
    <div class="not-prose mt-8 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg text-center">
      <p class="text-sm text-gray-600 dark:text-gray-400">
        This tutorial is brought to you by 
        <a href="https://pennypack.dev" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:text-blue-500 font-medium">
          Pennypack Software
        </a>
        - we build reliable software systems.
      </p>
      <p class="text-xs text-gray-500 dark:text-gray-500 mt-2">
        Questions or feedback? Email us at 
        <a href="mailto:feedback@pennypack.dev?subject=Feedback on Lesson {postNumber}: {title}" class="text-blue-600 hover:text-blue-500">
          feedback@pennypack.dev
        </a>
      </p>
    </div>
    
    <!-- Navigation -->
    <LessonNavigation prev={prevLesson} next={nextLesson} />
  </article>
</Layout>

<script>
  // Handle marking lessons as complete
  document.addEventListener('astro:page-load', () => {
    const button = document.getElementById('mark-complete');
    const lessonNumber = parseInt(button?.getAttribute('data-lesson-number') || '0');
    
    // Check if already completed
    const completedLessons = JSON.parse(localStorage.getItem('completedLessons') || '[]');
    if (completedLessons.includes(lessonNumber)) {
      if (button) {
        button.textContent = 'Completed ✓';
        button.classList.remove('bg-green-600', 'hover:bg-green-700');
        button.classList.add('bg-gray-400', 'cursor-not-allowed');
        (button as HTMLButtonElement).disabled = true;
      }
    }
    
    button?.addEventListener('click', () => {
      const completed = JSON.parse(localStorage.getItem('completedLessons') || '[]');
      if (!completed.includes(lessonNumber)) {
        completed.push(lessonNumber);
        localStorage.setItem('completedLessons', JSON.stringify(completed));
        
        button.textContent = 'Completed ✓';
        button.classList.remove('bg-green-600', 'hover:bg-green-700');
        button.classList.add('bg-gray-400', 'cursor-not-allowed');
        (button as HTMLButtonElement).disabled = true;
        
        // Trigger storage event for other components
        window.dispatchEvent(new Event('storage'));
      }
    });
  });
  
  // Add copy buttons to code blocks
  document.addEventListener('astro:page-load', () => {
    const codeBlocks = document.querySelectorAll('pre');
    
    codeBlocks.forEach((block) => {
      const button = document.createElement('button');
      button.className = 'copy-button';
      button.textContent = 'Copy';
      
      button.addEventListener('click', async () => {
        const code = block.querySelector('code')?.textContent || '';
        await navigator.clipboard.writeText(code);
        button.textContent = 'Copied!';
        setTimeout(() => {
          button.textContent = 'Copy';
        }, 2000);
      });
      
      block.style.position = 'relative';
      block.appendChild(button);
    });
  });
</script>